CREATE TABLE STOCK (
    Stock_Id INTEGER PRIMARY KEY,
    User_Email VARCHAR2(50),
    Number_Shares INTEGER CHECK (Number_Shares > -1),
    Company_Id INTEGER
);

CREATE TABLE COMPANY (
    Company_Id INTEGER PRIMARY KEY,
    Company_Name VARCHAR2(50),
    Company_Value FLOAT
);

CREATE TABLE USERTABLE (
    User_Email VARCHAR2(50) PRIMARY KEY,
    User_Password VARCHAR2(50),
    User_ssn INTEGER UNIQUE
);

CREATE TABLE ORDERTABLE (
    Order_Id INTEGER PRIMARY KEY,
    Order_Code INTEGER,
    Stop_Price FLOAT,
    Pres_Value FLOAT,
    Company_Buy INTEGER,
    Company_Sell INTEGER,
    Number_Bought FLOAT,
    Order_Succeed INTEGER DEFAULT 0,
    User_ssn INTEGER UNIQUE
);





-- Create foreign keys
ALTER TABLE ORDERTABLE ADD CONSTRAINT FK_COMPANY_BUY
FOREIGN KEY (Company_Buy)
REFERENCES COMPANY (Company_Id);

ALTER TABLE ORDERTABLE ADD CONSTRAINT FK_COMPANY_SELL
FOREIGN KEY (Company_Sell)
REFERENCES COMPANY (Company_Id);

ALTER TABLE ORDERTABLE ADD CONSTRAINT FK_USER_SSN
FOREIGN KEY (User_ssn)
REFERENCES USERTABLE (User_ssn);

ALTER TABLE STOCK ADD CONSTRAINT FK_STOCK_COMPANY
FOREIGN KEY (Company_Id)
REFERENCES COMPANY (Company_Id);

-- Sequence
CREATE SEQUENCE SQ_ORDER_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SQ_COMPANY_ID START WITH 1 INCREMENT BY 1;

-- Populate


-- Trigger (before insert, use sequence)
CREATE OR REPLACE TRIGGER TR_INSERT_ORDER
BEFORE INSERT ON ORDERTABLE
FOR EACH ROW
BEGIN
    SELECT SQ_ORDER_ID.NEXTVAL INTO :NEW.Order_Id FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_COMPANY
BEFORE INSERT ON COMPANY
FOR EACH ROW
BEGIN
    SELECT SQ_COMPANY_ID.NEXTVAL INTO :NEW.Company_Id FROM DUAL;
END;
/


-- Stored Procedures
/*CREATE OR REPLACE PROCEDURE SP_CREATE_REQUEST
(E_ID IN NUMBER, R_AMT IN NUMBER, RES IN NUMBER, MNG IN NUMBER) AS
BEGIN
    --SAVEPOINT;
    
    INSERT INTO REQUEST (Employee_Id, Request_Amount, Resolved, Manager_Id) VALUES (E_ID, R_AMT, RES, MNG);
    
    --ROLLBACK    
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_UPDATE_REQUEST
(R_ID IN NUMBER, RES IN NUMBER, MNG IN NUMBER) AS
BEGIN
    --SAVEPOINT;
    
    UPDATE REQUEST SET Resolved = RES
        WHERE Request_Id = r_id;
        
    UPDATE REQUEST SET Manager_Id = RES
        WHERE Request_Id = r_id;
    
    --ROLLBACK    
    COMMIT;
END;
/
*/
